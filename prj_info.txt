1. Install Angular version 13.0.1 

    npm install -g @angular/cli@13.0.1

2. Create a new project with angular cli

    ng new hotelinventoryapp

3. Open the new folder in VSCode, and run the project

    ng serve --open 


4. Play with app.component.html to see the application changes.

    inline html and style

5. generate a new component.

    ng generate component rooms

6. Use the new "rooms" component in app.component.html by adding following.

    <app-rooms></app-rooms>

7. Template Syntax

    Binding Syntax

    a. Interpolation, using {{}}
    b. Property Binding
        HTML property binding [HtmlPropertyName]="ComponentPropertyName".
    c. Event Binding
        <button (click)="toggle()">Toggle</button>

    See rooms.componenet.html uses all three binding syntax.

8. directive
    a. Directives are used to change the behavior and appearance of DOM element.
    b. Directives can implement all lifecycle hooks.
    c. Directives can not have template.

    There are two types of directives.

    * Structural directives (with *).
    * Attribute directives (without *, ngClass, ngStyle).

    *ngIf
    *ngFor
    *ngSwitch
    ngClass
    ngStyle

9. pipes
    Pipes are used for data transformation.
    Pipes don't change actual object.

    .DatePipe
    .UpperCasePipe
    .LowerCasePipe
    .CurrencyPipe
    .DecimalPipe
    .PercentPipe
    .JsonPipe
    .SlicePipe
    .AsyncPipe


10. Add bootstrp styling.

    in the style.css, add:
    @import '~bootstrap/dist/css/bootstrap.min.css'



11.  Component communication.

    Parent/Child component.
    @Input, @Output decorator.

12. lifecycle hooks

    -Component instance has lifecycle hooks which can help you to hook into different events
    on Component.
    -lifecycle ends when componenet is destroyed.

    .ngOnChanges
    .ngOnInit
    .ngDoCheck
    .ngAfterContentInit
    .ngAfterContentChecked
    .ngAfterViewInit
    .ngAFterViewChecked
    .ngOnDestroy

    Useful ones are ngOnInit, ngOnChanges, ngAfterContentInit, ngOnDestroy


13. Dependency Injection (video 6:45)

    .Dependencies are service or objects needed by classes to perform some function.
    .It's a design pattern.
    .Angular has built-in Dependency Injection support.

    DI Providers
    .Class based providers.
    .Value Providers.
    .Factory.

14. Angular Http and Observables
    .Introduction
    .Setting Up HttpClient
    .Using HttpClient service
    .RxJs, Observables and streams
    .http methods
    .RxJs Operators
    .Http Interceptors
    .APP_Initializers


    A few changes for making the HTTP call working.


    a). Added src/proxy.conf.json  file.
    b). Added   "proxyConfig": "src/proxy.conf.json" to angular.json under serve/development.
    c). Added import HttpClientModule in app.module.ts
    d). Modified rooms.service.ts:

        1) import { HttpClient } from '@angular/common/http';

        2) Add HttpClient in the constructor
            constructor(private http:HttpClient) { }
        3) Modify the getRooms() methods

            getRooms() {
             return this.http.get<RoomList[]>('api/rooms');
            }

    e). Modified rooms.component.ts as below.

        ngOnInit(): void {
            this.roomService.getRooms().subscribe(rooms => {this.roomList = rooms});
        }

    f). Lastly, need to run "hotelapi" service separately on port 3000.
    




    



video time: 7:41, Angular Http and Observables