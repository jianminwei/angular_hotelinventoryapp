1. Install Angular version 13.0.1 

    npm install -g @angular/cli@13.0.1

2. Create a new project with angular cli

    ng new hotelinventoryapp

3. Open the new folder in VSCode, and run the project

    ng serve --open 


4. Play with app.component.html to see the application changes.

    inline html and style

5. generate a new component.

    ng generate component rooms

6. Use the new "rooms" component in app.component.html by adding following.

    <app-rooms></app-rooms>

7. Template Syntax

    Binding Syntax

    a. Interpolation, using {{}}
    b. Property Binding
        HTML property binding [HtmlPropertyName]="ComponentPropertyName".
    c. Event Binding
        <button (click)="toggle()">Toggle</button>

    See rooms.componenet.html uses all three binding syntax.

8. directive
    a. Directives are used to change the behavior and appearance of DOM element.
    b. Directives can implement all lifecycle hooks.
    c. Directives can not have template.

    There are two types of directives.

    * Structural directives (with *).
    * Attribute directives (without *, ngClass, ngStyle).

    *ngIf
    *ngFor
    *ngSwitch
    ngClass
    ngStyle

9. pipes
    Pipes are used for data transformation.
    Pipes don't change actual object.

    .DatePipe
    .UpperCasePipe
    .LowerCasePipe
    .CurrencyPipe
    .DecimalPipe
    .PercentPipe
    .JsonPipe
    .SlicePipe
    .AsyncPipe


10. Add bootstrp styling.

    in the style.css, add:
    @import '~bootstrap/dist/css/bootstrap.min.css'



11.  Component communication.

    Parent/Child component.
    @Input, @Output decorator.

12. lifecycle hooks

    -Component instance has lifecycle hooks which can help you to hook into different events
    on Component.
    -lifecycle ends when componenet is destroyed.

    .ngOnChanges
    .ngOnInit
    .ngDoCheck
    .ngAfterContentInit
    .ngAfterContentChecked
    .ngAfterViewInit
    .ngAFterViewChecked
    .ngOnDestroy

    Useful ones are ngOnInit, ngOnChanges, ngAfterContentInit, ngOnDestroy


13. Dependency Injection (video 6:45)

    .Dependencies are service or objects needed by classes to perform some function.
    .It's a design pattern.
    .Angular has built-in Dependency Injection support.

    DI Providers
    .Class based providers.
    .Value Providers.
    .Factory.

14. Angular Http and Observables
    .Introduction
    .Setting Up HttpClient
    .Using HttpClient service
    .RxJs, Observables and streams
    .http methods
    .RxJs Operators
    .Http Interceptors
    .APP_Initializers
    .RxJs is an library for writing Reactive Programming.
    .Observables are stream of data to which we can subscribe.


    A few changes for making the HTTP call working.


    a). Added src/proxy.conf.json  file.
    b). Added   "proxyConfig": "src/proxy.conf.json" to angular.json under serve/development.
    c). Added import HttpClientModule in app.module.ts
    d). Modified rooms.service.ts:

        1) import { HttpClient } from '@angular/common/http';

        2) Add HttpClient in the constructor
            constructor(private http:HttpClient) { }
        3) Modify the getRooms() methods

            getRooms() {
             return this.http.get<RoomList[]>('api/rooms');
            }

    e). Modified rooms.component.ts as below.

        ngOnInit(): void {
            this.roomService.getRooms().subscribe(rooms => {this.roomList = rooms});
        }

    f). Lastly, need to run "hotelapi" service separately on port 3000.
    


15. RxJs Operators

    .ShareReplay
    .CatchError
    .Map operators

16. Http Interceptors

    .Allows us to intercept request
    .We can change data and add headers.


    1). ng g interceptor request     // this is how you generate an interceptor using cli.

    2). modify app.module.ts:

        providers: [
            {
            provide: HTTP_INTERCEPTORS,
            useClass: RequestInterceptor,
            multi: true,
            }
        ],

    3). modify request.interceptor.ts

        intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
            //console.log('Request Interceptor', request);

            //You have to clone a new request, and add whatever you need to add
            const newRequest = request.clone({headers: new HttpHeaders({token: '1234567'})})

            //do the HTTP call using the new request.
            return next.handle(newRequest);
        }



17. APP_Initializers

    .APP_INITIALIZER allows you to inject function when application startup.


    a) ng g s init       //generate a init service.

    b) Put following code in InitService

        export class InitService {
            config: any;

            constructor(private http:HttpClient) { }

            init() {
                return this.http
                .get('assets/config.json')
                .pipe(tap((config) => (this.config = config)));
            }
        }

    c) Add a function to app.module.ts 

        function initFactory(initService: InitService) {
            return () => initService.init();
        }

    d) Add following to app.module.ts providers section.
        {
        provide: APP_INITIALIZER,
        useFactory: initFactory,
        deps: [InitService],
        multi: true
        }   

    e) Use it in app.componenet.ts constructor.

        constructor(@Inject(localStorageToken) private localStorage: Storage,
                    private initService: InitService) {
            console.log(initService.config);

        }     

    f) you should be able to see the config.json in the dev tools console.


18. Angular Router
    .Setup Router
    .Using ActivatedRoute service
    .Using Router service
    .Feature Module and routing
    .Nested Routing and Child Routes
    .Lazy Loading.
    .Route Guards



    a) Setup

        .import Router Module
        .forRoot method allows us to add multiple route config.
        .Default route
        .Dynamic route
        .Wild card route



        Configured first route 'rooms', call component RoomsComponent.
        and empty path '' (http://localhost:4200) redirectTo rooms route.

        const routes: Routes = [
            {path: 'rooms', component: RoomsComponent},
            {path: '', redirectTo: 'rooms', pathMatch: 'full'},
        ];

        finally, modify app.component.html to comment everything else, only add below line to it.
        It really means that app.component.html is taking 100% of Router output.

        <router-outlet></router-outlet>
        

20. Use Angular Material

    a) Add angular Material

        ng add @angular/material

        Choose  theme  Indigo/Pink      
        ? Set up global Angular Material typography styles? Yes 
        ? Set up browser animations for Angular Material? Yes

    b). generate app navigation

        ng g @angular/material:navigation app-nav

    c). In app.component.html:

        Comment out <!-- <router-outlet></router-outlet> -->

        And add,  <app-app-nav></app-app-nav>

        This is really replacing router outlet by app-nav output.


    d). In app-nav.component.html, change like below

            <mat-nav-list>
                <a mat-list-item  routerLink="rooms" >Rooms</a>
                <a mat-list-item href="#">Link 2</a>
                <a mat-list-item href="#">Link 3</a>
            </mat-nav-list>

        And move the Router outlet here:

            <!-- Add Content Here -->
            <router-outlet></router-outlet>


21. Configured wildcard route to open page-notfound component.

    a). Generate page-notfound component.

    b). Configure wildcar route in app-routing.module.ts

      {path: '**', component: PageNotfoundComponent}, //wild card routes



22. Dynamic route.

    a). Under "rooms" folder (you can right click on "rooms" folder in the explorer and select "open in integreated terminal" ), generate a rooms-booking componenet.

        ng g c rooms-booking

    b). In app-routing-module.ts, add below new path:

      {path: 'rooms/:id', component: RoomsBookingComponent},

    c). In rooms-list.componenet.html, comment out original button click event, replace it by a routerLink:

        <td>
            <!-- <button class="btn btn-primary" (click)="selectRoom(room)">
                Select
            </button> -->

            <button class="btn btn-primary" [routerLink]="['/rooms', room.roomNumber]">Book Room</button>
        </td>


23. ActivatedRoute service

    .Allows to read the router data.
    .Allows access to snapshot data.
    .Allows to access data from Route Config.


    a). Change tsconfig.json to add following TS option:

            "noImplicitAny": false,

    b). Change rooms-booking.component.ts to add following property:

         id$ = this.router.params.pipe(map(params => params['roomNumber']));

    
    c). Change rooms-booking.component.html as following:

        <div> Room Number: {{id$ | async}}</div>


        Note: id$ is an RxJs Observable, so here needs to use async pipe.




video time: 10:11, Angular Router